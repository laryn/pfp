<?php

/* PFP - Prefab Paragraphs */

/*
** Provide valid Paragraph Type blueprints.
**
** @todo Allow other modules to alter and add to this list? Search for all
**       blueprints folders?
*/
function pfp_get_blueprints($paragraph_type = NULL) {
    $path = backdrop_get_path('module', 'pfp') . '/blueprints';
    $blueprints = array(
        'pfp_embed' => array(
            'machine_name' => 'pfp_embed',
            'name' => t('Embed'),
            'description' => t('A simple text area with no WYSIWYG for pasting embed code in.'),
            'path' => $path,
            'configs' => array(
                'field.field.pfp_text_area',
                'field.bundle.paragraphs_item.pfp_embed',
                'field.instance.paragraphs_item.pfp_embed.pfp_text_area',
                'field.bundle.paragraphs_item.pfp_embed',
            ),
            'dependencies' => array(
                '',
            ),
        ),
        'pfp_text' => array(
            'machine_name' => 'pfp_text',
            'name' => t('Text'),
            'description' => t('A text area with section title and settings for column display.'),
            'path' => $path,
            'configs' => array(
                'classy_paragraphs_ui.sets',
                'classy_paragraphs_ui.classes',
                'field.field.pfp_section_title',
                'field.field.pfp_text_area',
                'field.field.pfp_columns',
                'field.instance.paragraphs_item.pfp_text.pfp_section_title',
                'field.instance.paragraphs_item.pfp_text.pfp_text_area',
                'field.instance.paragraphs_item.pfp_text.pfp_columns',
                'field_group.field_group.paragraphs_item.pfp_text.form.group_settings',
                'field.bundle.paragraphs_item.pfp_text',
            ),
            'dependencies' => array(
                'classy_paragraphs',
                'field_group',
            ),
        ),
        'pfp_image' => array(
            'machine_name' => 'pfp_image',
            'name' => t('Image'),
            'description' => t('An image field that allows free cropping, with settings for section width and background color.'),
            'path' => $path,
            'configs' => array(
                'classy_paragraphs_ui.sets',
                'classy_paragraphs_ui.classes',
                'image.style.pfp_free_crop',
                'field.field.pfp_image',
                'field.field.pfp_background_color',
                'field.field.pfp_width',
                'field.instance.paragraphs_item.pfp_image.pfp_image',
                'field.instance.paragraphs_item.pfp_image.pfp_background_color',
                'field.instance.paragraphs_item.pfp_image.pfp_width',
                'field_group.field_group.paragraphs_item.pfp_image.form.group_settings',
                'field.bundle.paragraphs_item.pfp_image',
            ),
            'dependencies' => array(
                'classy_paragraphs',
                'field_group',
                'image',
                'manualcrop',
            ),
        ),
        'pfp_gallery' => array(
            'machine_name' => 'pfp_gallery',
            'name' => t('Gallery'),
            'description' => t('A multi-value image field with various settings.'),
            'path' => $path,
            'configs' => array(
                'image.style.pfp_gallery_thumb',
                'field.field.pfp_gallery',
                'field.field.pfp_background_color',
                'field.field.pfp_columns',
                'field.field.pfp_width',
                'field.instance.paragraphs_item.pfp_gallery.pfp_background_color',
                'field.instance.paragraphs_item.pfp_gallery.pfp_columns',
                'field.instance.paragraphs_item.pfp_gallery.pfp_gallery',
                'field.instance.paragraphs_item.pfp_gallery.pfp_width',
                'field_group.field_group.paragraphs_item.pfp_gallery.form.group_settings',
                'field.bundle.paragraphs_item.pfp_gallery',
            ),
            'dependencies' => array(
                'colorbox',
                'classy_paragraphs',
                'field_group',
                'image',
                'manualcrop',
            ),
        ),
        'pfp_video' => array(
            'machine_name' => 'pfp_video',
            'name' => t('Video'),
            'description' => t('A multi-value video field with various settings.'),
            'path' => $path,
            'configs' => array(
                'field.field.pfp_video',
                'field.field.pfp_background_color',
                'field.field.pfp_width',
                'field.instance.paragraphs_item.pfp_video.pfp_background_color',
                'field.instance.paragraphs_item.pfp_video.pfp_video',
                'field.instance.paragraphs_item.pfp_video.pfp_width',
                'field_group.field_group.paragraphs_item.pfp_video.form.group_settings',
                'field.bundle.paragraphs_item.pfp_video',
            ),
            'dependencies' => array(
                'video_embed_field',
                'classy_paragraphs',
                'field_group',
            ),
        ),
        'pfp_audio' => array(
            'machine_name' => 'pfp_audio',
            'name' => t('Audio'),
            'description' => t('An audio field with various settings.'),
            'path' => $path,
            'configs' => array(
                'field.field.pfp_audio',
                'field.field.pfp_background_color',
                'field.field.pfp_width',
                'field.instance.paragraphs_item.pfp_audio.pfp_audio',
                'field.instance.paragraphs_item.pfp_audio.pfp_background_color',
                'field.instance.paragraphs_item.pfp_audio.pfp_width',
                'field_group.field_group.paragraphs_item.pfp_audio.form.group_settings',
                'field.bundle.paragraphs_item.pfp_audio',
            ),
            'dependencies' => array(
                'classy_paragraphs',
                'field_group',
            ),
        ),
        'pfp_files' => array(
            'machine_name' => 'pfp_files',
            'name' => t('Files'),
            'description' => t('A multi-value file field.'),
            'path' => $path,
            'configs' => array(
                'field.field.pfp_files',
                'field.instance.paragraphs_item.pfp_files.pfp_files',
                'field.bundle.paragraphs_item.pfp_files',
            ),
            'dependencies' => array(
                '',
            ),
        ),
        'pfp_quote' => array(
            'machine_name' => 'pfp_quote',
            'name' => t('Quote'),
            'description' => t('A pull quote and credit.'),
            'path' => $path,
            'configs' => array(
                'field.field.pfp_credit',
                'field.field.pfp_text_area',
                'field.field.pfp_background_color',
                'field.field.pfp_width',
                'field.instance.paragraphs_item.pfp_quote.pfp_credit',
                'field.instance.paragraphs_item.pfp_quote.pfp_text_area',
                'field.instance.paragraphs_item.pfp_quote.pfp_background_color',
                'field.instance.paragraphs_item.pfp_quote.pfp_width',
                'field_group.field_group.paragraphs_item.pfp_quote.form.group_settings',
                'field.bundle.paragraphs_item.pfp_quote',
            ),
            'dependencies' => array(
                'classy_paragraphs',
                'field_group',
            ),
        ),
        'pfp_slider' => array(
            'machine_name' => 'pfp_slider',
            'name' => t('Slider'),
            'description' => t('A slider for image and text.'),
            'path' => $path,
            'configs' => array(
                'image.style.pfp_slide',
                'field.field.pfp_image',
                'field.field.pfp_text_area',
                'field.instance.paragraphs_item.pfp_slide.pfp_image',
                'field.instance.paragraphs_item.pfp_slide.pfp_text_area',
                'field.bundle.paragraphs_item.pfp_slide',
                'paragraphs.type.pfp_slide',
                'field.field.pfp_slider',
                'field.field.pfp_background_color',
                'field.field.pfp_width',
                'field.instance.paragraphs_item.pfp_slider.pfp_slider',
                'field.instance.paragraphs_item.pfp_slider.pfp_background_color',
                'field.instance.paragraphs_item.pfp_slider.pfp_width',
                'field_group.field_group.paragraphs_item.pfp_slider.form.group_settings',
                'field.bundle.paragraphs_item.pfp_slider',
            ),
            'dependencies' => array(
                'classy_paragraphs',
                'field_group',
                'flexslider_paragraphs',
            ),
        ),
    );
    if (!empty($paragraph_type)) {
        if (!empty($blueprints[$paragraph_type])) {
            // Return single blueprint.
            return $blueprints[$paragraph_type];
        }
        else {
            // Invalid Paragraph Type requested.
            return FALSE;
        }
    }
    else {
        // Return all results.
        return $blueprints;
    }
}

/**
 * Implements hook_permission().
 */
function pfp_permission() {
  return array(
    'administer prefab paragraphs' => array(
      'title' => t('Administer Prefab Paragraphs'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pfp_menu() {
  $items['admin/structure/paragraphs/pfp'] = array(
    'title' => t('Blueprints'),
    'description' => t('List available Paragraph type blueprints'),
    'page callback' => 'pfp_overview_blueprints',
    'access arguments' => array('administer prefab paragraphs'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/structure/paragraphs/pfp/%/build'] = array(
    'title' => t('Build a Paragraph type from a blueprint'),
    'description' => t('Build a Paragraph type from a blueprint'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('pfp_build_paragraph_type', 4),
    'access arguments' => array('administer prefab paragraphs'),
  );
  return $items;
}

/**
 * List all available Paragraph type blueprints.
 */
function pfp_overview_blueprints() {
    backdrop_set_title(t('Prefab Paragraph blueprints'));
    $blueprints = pfp_get_blueprints();
    $header_unbuilt_ready = array(
        t('Available Blueprints'),
        t('Operations'),
    );
    $header_unbuilt_missing = array(
        t('Blueprints which are missing dependencies'),
        t('Dependencies'),
    );
    $header_built = array(
        t('Used Blueprints'),
        t('Operations'),
    );
    $rows_unbuilt_ready = array();
    $rows_unbuilt_missing = array();
    $rows_built = array();

    foreach ($blueprints as $key => $blueprint) {
        $already_exists = (config_get('paragraphs.type.' . $blueprint['machine_name'], 'bundle')) ? 1 : 0;
        $blueprint_url_str = str_replace('_', '-', $key);
        $blueprint_type = new StdClass();
        $blueprint_type->type = $key;
        $blueprint_type->description = $blueprint['description'];
        $row = array(theme('node_admin_overview', array('name' => $blueprint['name'], 'type' => $blueprint_type)));
        $links = array();
        if (!$already_exists) {
            // Doesn't exist -- check dependencies.
            $missing = array();
            foreach ($blueprint['dependencies'] as $dependency) {
                if (!empty($dependency) && !module_exists($dependency)) {
                    $missing[] = $dependency;
                }
            }
            if (empty($missing)) {
                // Dependencies are all met -- allow it to be built.
                $links['build'] = array(
                    'title' => t('Use this blueprint'),
                    'href' => 'admin/structure/paragraphs/pfp/' . $blueprint_url_str . '/build',
                    'weight' => 0,
                );
                $row[] = array(
                    'data' => array(
                        '#type' => 'operations',
                        '#links' => $links,
                    ),
                );
                $rows_unbuilt_ready[$blueprint['name']] = $row;
            }
            else {
                // Dependencies are missing -- do not allow it to be built.
                $row[] = array(
                    'data' => t('Requires:') . ' ' . implode(', ', $missing),
                );
                $rows_unbuilt_missing[$blueprint['name']] = $row;
            }


        }
        else {
            // Already exists -- do not try to rebuild.
            $links['configure'] = array(
                'title' => t('Manage fields'),
                'href' => 'admin/structure/paragraphs/' . $blueprint_url_str . '/fields',
                'weight' => 0,
            );
            $row[] = array(
                'data' => array(
                    '#type' => 'operations',
                    '#links' => $links,
                ),
            );
            $rows_built[$blueprint['name']] = $row;
        }
    }
    ksort($rows_unbuilt_ready);
    ksort($rows_unbuilt_missing);
    ksort($rows_built);
    $build['pfp_table_unbuilt'] = array(
    '#theme' => 'table',
    '#header' => $header_unbuilt_ready,
    '#rows' => $rows_unbuilt_ready,
    '#empty' => t('No Paragraph type blueprints available.'),
    );
    if (!empty($rows_unbuilt_missing)) {
        $build['pfp_table_unbuilt_missing'] = array(
        '#theme' => 'table',
        '#header' => $header_unbuilt_missing,
        '#rows' => $rows_unbuilt_missing,
        '#empty' => t('No Paragraph type blueprints available.'),
        );
    }
    if (!empty($rows_built)) {
        $build['pfp_table_built'] = array(
        '#theme' => 'table',
        '#header' => $header_built,
        '#rows' => $rows_built,
        '#empty' => t('No Paragraph type blueprints have been used.'),
        );
    }

    return $build;
}

/*
** Build a paragraph type from the blueprints.
*/
function pfp_build_paragraph_type($form, &$form_state, $paragraph_type = NULL) {
    $paragraph_type = str_replace('-', '_', $paragraph_type);
    $error = array();
    if (!empty($paragraph_type)) {
        // See if this Paragraph Type has a valid blueprint.
        $blueprint = pfp_get_blueprints($paragraph_type);
        if (!empty($blueprint)) {
            $name = $blueprint['name'];
            $pfp_config = config('paragraphs.type.' . $paragraph_type);
            // See if this Paragraph Type already exists on this site.
            if ($pfp_config->isNew()) {
                // If not, check dependencies and create the Paragraph Type.
                $fail = 0;
                foreach ($blueprint['dependencies'] as $dependency) {
                    if (!empty($dependency) && !module_exists($dependency)) {
                        $fail = 1;
                        $error[] = t('The %name Paragraph type could not be built because the %dependency module is not installed.', array('%name' => $name, '%dependency' => $dependency));
                    }
                }
                if (!$fail) {
                    foreach ($blueprint['configs'] as $needed_config) {
                        $result = _pfp_build_config($blueprint['path'], $needed_config);
                        if (!empty($result)) {
                            $error[] = $result;
                        }
                    }
                    $result = _pfp_build_config($blueprint['path'], 'paragraphs.type.' . $blueprint['machine_name']);
                    if (!empty($result)) {
                        $error[] = $result;
                    }
                }
                else {
                    $error[] = t('The %name Paragraph type could not be built.', array('%name' => $name));
                }
            }
            else {
                // This Paragraph Type already exists.
                $error[] = t('The %name Paragraph type already exists.', array('%name' => $name));
            }
        }
        else {
            $error[] = t('The requested blueprint does not exist.');
        }
        if (empty($error)) {
            backdrop_set_message(t('The %name Paragraph type has been built according to the blueprint.', array('%name' => $name)));
        }
    }
    else {
        // @todo allow "all" to build all available Paragraphs? Maybe.
    }

    if (!empty($error)) {
        backdrop_set_message(implode('<br />', $error), 'warning');
    }
    cache_clear_all();
    cache_clear_all();
    backdrop_goto('admin/structure/paragraphs/pfp');
}

/**
 * Build a particular config file from a blueprint.
 */
function _pfp_build_config($path = '', $machine_name = '') {
    $error = '';
    if (!empty($path) && !empty($machine_name)) {
        $config = config($machine_name);
        if ($config->isNew()) {
            $storage = new ConfigFileStorage($path);
            $data = $storage->read($machine_name);
            $config->setData($data);
            module_invoke_all('config_create', $config);
            $config->save();
        }
        else {
            $error = t('Note: %config already exists and has not been changed. This could affect default functionality if it has been modified from the original settings.', array('%config' => $machine_name));
        }
    }
    else {
        $error = t('There was an error installing this blueprint.');
    }
    return $error;
}
